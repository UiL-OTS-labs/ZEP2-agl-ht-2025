/******************************************************************************\
FILE:           fam_handler.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides a state machine to handle the head-turn procedure contingency for
the lights only. Once started the auditory stimuli continue independently.
It controls the lights through the experiment control page.


HISTORY:
2012-02-20 TV   Created.
2017-05-26 TV   Adapted for Zep 2.0.

\******************************************************************************/

import familiarization::front_page;
import output;
import test::left_page;
import test::right_page;
import validate_sound_file;

// Symbolic definition of responses/events.
enum TestEvent {
    RESPONSE_GO,
    RESPONSE_START_ATTENTION,
    RESPONSE_HALT,
    AUDIO_START,
    AUDIO_FINISH,
    TRAINING_REPEAT,
}


State fam_handler
{
    TestItem    item;           // trial control parameters

    Direction   lightpos;       // which side light is presented

    int         leftsidecount;
    int         rightsidecount;

    bool        running;        // set at first 'looking' for first trial


    init()
    {
        lightpos = FRONT_SIDE;
    }


    on_event:exit()
    {
        stop_light(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
        control.hide_speaker_icon(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
        control.erase_clock();
    }

    void start_light(int mask)
    {
        control.start_light(mask);
    }

    void stop_light(int mask)
    {
        control.stop_light(mask);
    }

    State idle
    {
        on_event:entry()
        {
            println("enter idle");
            stop_light(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
        }


        on_event:message()
        {
            if (message_arg == RESPONSE_START_ATTENTION)
                attention_resetting.enter();
        }
    }


    State attention_resetting
    {
        on_event:entry()
        {
            println("enter attention resetting");
            start_light(FRONT_SIDE);

            front_page.show_animation();

            // Only reset the clock at the first trial.
            if (!running) control.begin_clock();
        }


        on_event:message()
        {
            if (message_arg == RESPONSE_GO)
                stimulus_presentation.enter();
        }
    }


    State stimulus_presentation
    {
        on_event:entry()
        {
            println("enter stimulus presentation");
            lightpos = item.sound_direction;
            
            if (!running)
            {
                running = true;
                audio.play(event_time + 50ms);
                looking.enter();
            }

            stop_light(FRONT_SIDE | RIGHT_SIDE | LEFT_SIDE);
            start_light(lightpos);
        }

        on_event:message()
        {
        }
    }


    State looking
    {
        on_event:entry()
        {
            println("enter looking");
            control.start_clock(event_time);
        }

        on_event:exit()
        {
            control.stop_clock(event_time);
        }

        on_event:message()
        {
            if (message_arg == RESPONSE_HALT)
                not_looking.enter();
            else if (message_arg == AUDIO_START)
                control.release_clock(event_time);
        }
    }


    State not_looking
    {
        on_event:entry()
        {
            println("enter not looking");
            // Don't do anything yet.
        }

        on_event:exit()
        {
        }

        on_event:message()
        {
            if (message_arg == RESPONSE_GO)
                looking.enter();
            else if (message_arg == AUDIO_START)
                control.release_clock(event_time);
        }
    }

    SoundPlayback audio
    {
        int nth_stimulus = 0;
        string log_trial_name; 

        init()
        {
            num_channels = sound_settings::PLAYBACK_NUM_CHANNELS;
        }

        // Sound source/producer object.
        SoundFile clip {}
        SilenceGenerator silence {}

        on_event:start()
        {
            signal(fam_handler, AUDIO_START);

            if (!have_flag("no-et")) {
                eyetracker.add_message(EYE_DATA_STIMULUS_START, string(item.sndfn));

                if (nth_stimulus < NUM_NOISE_ITEMS_USED) {
                    log_trial_name = "noise_" + (nth_stimulus + 1);
                }
                else {
                    log_trial_name = "familiarization_" + (nth_stimulus + 1 - NUM_NOISE_ITEMS_USED);
                }
                eyetracker.print_to_data_file("start_trial" + " " + log_trial_name);
                eyetracker.print_to_data_file("start_phase" + " " + log_trial_name);
                eyetracker.print_to_data_file("var stimulus " + item.sndfn);

                int dt = int(now() - start_time);
                eyetracker.print_to_data_file("SYNCTIME" + dt);
            }

            lightpos = item.sound_direction;

            control.show_speaker_icon(lightpos);

            stop_light(FRONT_SIDE | RIGHT_SIDE | LEFT_SIDE);
            start_light(lightpos);
        }

        on_event:finish()
        {
            FamStimOutput out;
            control.hide_speaker_icon(lightpos);
            control.update_clock(event_time);

            eyetracker.print_to_data_file("end_phase");
            eyetracker.print_to_data_file("end_trial");

            out.trial = nth_stimulus + 1;
            out.id = item.id;
            out.language = item.language;
            out.sound_direction = string(item.sound_direction);
            out.ms_start = int(audio.start_time - zero_time());
            out.ms_stop = int(audio.finish_time - zero_time());

            nth_stimulus++;

            if (nth_stimulus >= fam_items.size) // we're done
                done(CONTINUE);
            else
                play(event_time + INTERSTIMULUS_INTERVAL);

            fam_stim_output_append(out);
        }

        void setup_channels()
        {
            this.scaling_all = 0;

            if(item.sound_direction & FRONT_SIDE)
            {
                 this.scaling[FRONT_RIGHT] = sound_settings::PLAYBACK_SCALING_VOLUME;
                 this.scaling[FRONT_LEFT] = sound_settings::PLAYBACK_SCALING_VOLUME;
            }

            if(item.sound_direction & LEFT_SIDE)
                this.scaling[REAR_LEFT] = sound_settings::PLAYBACK_SCALING_VOLUME;

            if(item.sound_direction & RIGHT_SIDE)
                this.scaling[REAR_RIGHT] = sound_settings::PLAYBACK_SCALING_VOLUME;
        }

        void play(time tstart)
        {
            abort();

            item = fam_items[nth_stimulus];

            device = sound_output_device;

            clip.file = stimuli_dir() + "sounds/fam/" + item.sndfn + ".wav";
            clip.selection_begin = 0s; //reset
            clip.fade_in_duration = 0s; //reset

            dur stim_dur = INTER_STIMULUS_ONSET_INTERVAL - INTERSTIMULUS_INTERVAL;

            if (clip.file_duration > stim_dur) {
                print_error(clip.file + " >= " + int(stim_dur));
            }

            dur silence_dur = stim_dur - clip.file_duration;

            silence.duration = silence_dur;

            validate_sample_rate(clip);

            control.set_status(
                "trial: " + (nth_stimulus + 1) + "  id: " + string(item.id) +
                "  direction: " + item.sound_direction);

            setup_channels();
            start(tstart);
        }
    }

    // Signals the initiator of the trial that we're done.
    void done(int msgid)
    {
        front_page.hide_animation();
        signal_target(msgid);   // tell caller we're done
        target = null;

        if (!have_flag("no-et")) {
        
            eyetracker.stop_tracking();

        }

        control.clear_status();
    }

    //==========================================================================


    // Performs preparatory work required before using this page.
    void setup()
    {
        // Enable response box buttons and fallback keyboard keys.
        control.target = this;
        control.disable_buttons();
        control.disable_keys();
        control.enable_button(test::BUTTON_GO, RESPONSE_GO);
        control.enable_button(test::BUTTON_ATTENTION, RESPONSE_START_ATTENTION);
        control.enable_button(test::BUTTON_HALT, RESPONSE_HALT);
        control.enable_key(KEY_Return, RESPONSE_GO);
        control.enable_key(KEY_Escape, RESPONSE_HALT);

        control.reset_clock();
        enter();
    }

    // Performs cleaning up if necessary.
    void cleanup(time t)
    {
        running = false;

        control.end_clock(t);
        audio.abort();

        control.disable_buttons();
        control.disable_keys();
        control.target = null;

        leave();
    }

    void action(Object caller, time tref, TestItem[] items)
    {
        if (!have_flag("no-et")) {
            eyetracker.start_tracking();
        }

        // Show pages representing the front and side lights on the appropriate
        // test windows.
        test_window1.show_page(front_page);
        test_window2.show_page(test::left_page);
        test_window3.show_page(test::right_page);

        // Update status line on control window. Cleared in done() above.


        // Remember who to signal when the trial is over.
        target = caller;
    }
}
