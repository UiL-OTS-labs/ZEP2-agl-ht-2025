/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Defines the global procedure for this experiment phase.


Global structure of this experiment phase:

  - familiarization part
      trial


HISTORY:
2012-02-20 TV   Created.
2017-05-26 TV   Adapted for Zep 2.0.

\******************************************************************************/


import defs;
import stimuli;
import output;
import fam_handler;
import attention_handler;
import std_blank_page;

import eyetracker_infant;
import et_setup_page;
import fam_constants;

// Familiarization item table.
TestItem[..] fam_items;

Block task
{

    on_event:entry()
    {
        eyetracker.setup();
    }
    
    on_event:exit()
    {
        eyetracker.cleanup();
    }

    TransientPart skip_cal
    {
        on_event:entry()
        {
            if (have_flag("no-et")) {
                familiarization.enter();
                return;
            }
        }
    }

    Part calibration
    {
        on_event:entry()
        {
            et_setup_page.action(this);
            // Temporarily activate the window of the eyetracker.
            // Otherwise, the keyboard focus is on the control window.
            // This is for eye tracker calibration.
            test_window1.activate();
        }

        on_event:exit()
        {
            // restore the focus on the control window.
            ctrl_window.activate();
        }
    }

    Block familiarization
    {

        on_event:entry()
        {
            num_cycles = 1;

            int recordingnum = 1;
            int listnum = 1;

            string fn = format(expdb.session.id, 4) + "_" +
                        format(listnum, 2) + "_" + format(recordingnum, 2);

            if (!have_flag("no-et")) {

                eyetracker.open_data_file(fn);

                eye_data_writer.file = fn;

                // start recording data
                eyetracker.start_stream();

                // log some info
                eyetracker.add_message(EYE_DATA_DISPLAY);
                eyetracker.add_message(EYE_DATA_TRACKBOX);
                eyetracker.add_message(EYE_DATA_APPLICATION);
                eyetracker.add_message(EYE_DATA_TRACKER);
                eyetracker.add_message(EYE_DATA_EXPERIMENT, expdb.experiment.id);
                eyetracker.add_message(EYE_DATA_RESEARCHER, expdb.researcher.id);
                eyetracker.add_message(EYE_DATA_PARTICIPANT, expdb.participant.id);
                if (expdb.group != null)
                    eyetracker.add_message(EYE_DATA_GROUP, expdb.group.id);
                eyetracker.add_message(EYE_DATA_SESSION, string(expdb.session.id));
                eyetracker.add_message(EYE_DATA_LIST, string(listnum));
                eyetracker.add_message(EYE_DATA_RECORDING, string(recordingnum));
                eyetracker.add_message(EYE_DATA_TITLE, "ZEP2-agl-ht-2024");
            }
        }

        on_event:exit()
        {
            if (!have_flag("no-et")) {
                eyetracker.abort();
                eyetracker.stop_stream();
                eye_data_writer.file = "";
                eyetracker.close_data_file();
            }
        }

        Block training_blocks
        {
            entry() {
                num_cycles = NUM_FAM_BLOCKS;
            }

            Trial attention {
                on_event:entry() {
                     attention_handler.setup();
                     attention_handler.action(this, reference_time);
                }
            };

            // One trial is an attention grabber and 6 stimuli.
            // The fam_handler will handle this.
            Trial trial
            {
                TestItem[] block_items = {};

                on_event:entry()
                {
                    block_items.size = NUM_STIMULI_PER_BLOCK;
                    int start  = training_blocks.cycle * NUM_STIMULI_PER_BLOCK;

                    // Populate the current block items.
                    int i = 0;
                    while (i < NUM_STIMULI_PER_BLOCK) {
                        block_items[i] = fam_items[start + i];
                        i++;
                    }

                    fam_handler.setup();
                    fam_handler.action(
                            this,
                            reference_time,
                            block_items,
                            training_blocks.cycle + 1);

                    if (!have_flag("no-et")) {
                        eyetracker.add_message(EYE_DATA_TRIAL_START,
                                string(familiarization.cycle) + "," +
                                "001" + "," + "familiarization");

                        eyetracker.print_to_data_file("trialbeg begin familiarization");
                        eyetracker.print_to_data_file("plafile grid0.bmp");

                        eyetracker.set_tracker_status_message("familiarization");
                    }
                }

                on_event:exit()
                {
                    if (!have_flag("no-et")) {
                        eyetracker.add_message(EYE_DATA_TRIAL_END,
                            string(familiarization.cycle) + "," +
                            "001" + "," + "familiarization");
                        
                        eyetracker.print_to_data_file("trialend end familiarization");

                        eyetracker.set_tracker_status_message("");
                    }

                    // Add new row to output table.

                    // Also save look/no-look durations.

                    int nstamps = control.clock.timestamps.size - 1;

                    int index;
                    while (index < nstamps)
                    {
                        time lasttimestamp = control.clock.timestamps[index];
                        SingleEpochOutput epoch_output;

                        epoch_output.duration       = dur_to_seconds(control.clock.timestamps[index+1] - lasttimestamp); // seconds
                        epoch_output.duration_ms    = int(control.clock.timestamps[index+1] - lasttimestamp);
                        epoch_output.epoch_type     = (index & 1) ? "NOTLOOKING" : "LOOKING";
                        epoch_output.snd_direction  = "front";

                        looknolook_output_append(epoch_output);

                        index++;
                    }

                    save_trial_data();
                }
            }
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
