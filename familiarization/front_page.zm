/******************************************************************************\
FILE:           front_page.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides a page object for presenting the front screen attention getter.
The attention getter is a size modulated green circle.

HISTORY:
2017-01-09 TV   Created.

\******************************************************************************/


Page front_page
{
    init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
    }


    VerticalLayout layout
    {
        init()
        {
            spacing = 50;
            height = 0;     // 0 means as large as possible
        }


        CanvasGadget canvas
        {
            init()
            {
                size = 800, 800;
                offset_x = width / 2;
                offset_y = height / 2;
            }

            ImageShape bg 
            {
                init()
                {
                    string image_fn = stimuli_dir() + "images/";
                    image_fn += "doll" + ".png";
                    image = image_fn;
                    real ratio = image_height / image_width;
                    width = canvas.width / 4;
                    height= width * ratio;
                    x = -width/2;
                    y = -height/2;
                }

                on_event:pre_update()
                {
                    dur frame_dur = display_device.num_frames_to_duration(
                        front_page.window.actual_head,
                        1
                    );
                    real dur_cumulative = relative_frame * 1/ real(frame_dur);
                    rotation = dur_cumulative;
                }
            }

            ImageShape attention_getter
            {
                const string sub_dir = "images/slide/";
                string file = "frame";
                int num;

                init()
                {
                    image = compute_name(0);

                    width = image_width;
                    height = image_height;

                    // put the origin in the center.
                    x = -width/2;
                    y = -height/2;
                    is_visible = false;
                }

                pre_update()
                {
                    if (relative_frame % 3 == 2) {
                        image = compute_name(num);
                        num = num + 1;
                        if (num >= max_pictures()) {
                            num = 0;
                        }
                    }
                }

                string compute_name(int n) {
                    return stimuli_dir() + sub_dir + file + format(n, 3) + ".png";
                }

                int max_pictures() {
                    if (sub_dir == "images/baby/") {
                        return 21;
                    }
                    else if (sub_dir == "images/slide/") {
                        return 25;
                    }
                    else {
                        print_error("sub_dir has unexpected value\n");
                        flush_error();
                        return 0;
                    }
                    // All possible path's above return a value, but zep requires
                    // this return;
                    return 0;
                }

                void start_attention(time t) {
                    this.start(t);
                }
            }
        }

        void start_bg()
        {
            canvas.bg.start(now());
        }

        void stop_bg()
        {
            canvas.bg.abort();
            canvas.bg.is_visible = false;
        }
        
        void start_attention()
        {
            canvas.attention_getter.num = 0;
            canvas.attention_getter.start(now());
        }

        void stop_attention()
        {
            canvas.attention_getter.abort();
            canvas.attention_getter.is_visible = false;
            canvas.attention_getter.num = 0;
        }
    }

    //==========================================================================

    void show_attention() {
        layout.start_attention();
    }
    
    void hide_attention() {
        layout.stop_attention();
    }

    void show_animation()
    {
        layout.start_bg();
    }


    void hide_animation()
    {
        layout.stop_bg();
    }
}
